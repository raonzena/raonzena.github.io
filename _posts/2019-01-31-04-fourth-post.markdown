---
published: true
layout: post
title:  "javascript - Variable, Type, Conditional"
date:   2019-01-31
author: raonzena 
category: javascript
tags:
- javascript
comments: true
---

# 1. Variable #
### 필요한 이유 ###
- 여러군데에서 사용하는 값을 매번 입력하여 사용하기 힘들고 복잡함  
변수로 한 번 지정하면 변수이름만 기억해 놓으면 사용하기 편함  
- var 변수이름 = 값;  
- Camel Case 사용  

<br/>

# 2. Type #
- 변수 생성 시, 변수의 형태에 따라 인터프리터가 변수의 타입을 정해준다.  
**(연산자를 사용할 때 서로 다른 타입을 사용하지 않는 것이 좋다.)**  
- **typeof** : 타입을 알려줌.  
~~~javascript
typeof "hello" // string
typeof 1.23 // number
~~~

- **느슨한 타입 체크 vs 업격한 타입 체크**  
==(=!), ===(==!)  
2 equal sign일때는 타입체크(typeof)를 하지 않지만, 3 equal sign일때는 타입까지 체크를 한다.  
***따라서 느슨한 타입 체크는 사용하지 않는 것이 좋다.***

- **falsy value**  
null : 값이 없음  
undefined : 값이 정해지지 않은 것  

<br/>

# 3. Conditional #

- **Booleans** : true, false  
- **Comparison Operators** : 비교 연산자 <,>,<=,>=, ===, !== 등

- **Logical Operators**  
  Logical NOT (!)  
  !Boolean(value)
- **falsy value**
  - false  
  - null  
  - undefined  
  - 0  
  - NaN  
  - ''  
- **Logical OR (||)**  
  두 개 이상의 조건문에서 하나라도 조건이 성립할 때 true, 하나도 성립하지 않으면 false
- **Logical AND (&&)**  
  두 개 이상의 조건문에서 하나라도 조건이 성립하지 않으면 false, 모두 성립하면 true

<br/>

# 4. Array (배열) #
- 대괄호로 감싸며, 반점으로 값을 구분  
- 배열은 값들에 대한 주소를 가지고 있는데 이를 index라고 함  
- ***index는 0부터 시작하기 때문에 주의***

<br/>

# 5. Object (객체) #
- key와 value 한 쌍으로 이루어진 요소를 가짐
- comma(,)로 각 요소를 구분
~~~javascript
var objectName = {
   key : value,
   ...
};
~~~

- **객체의 요소를 사용하는 방법**  
1) Dot Notation
~~~javascript
objectName.key // => value
~~~  
2) Bracket Notaion
~~~javascript
objectName['key'] // => value
~~~