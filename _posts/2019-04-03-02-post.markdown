---
published: true
layout: post
title:  "Data Structure: Graph"
date:   2019-04-03
author: raonzena 
category: Data Structure
tags:
- Data Structure
- Graph
comments: true
---

# Graph란 #
Graph는 현실 세계에 존재하는 사물, 현상 등(객체)간의 관계를 표현하는 자료구조이며, 노드(Node)와 엣지(Edge)로 구성되어 있습니다.  
ex) 지하철 노선도, 지도, 쾨니히스베르그의 다리 등
노드(Node)는 객체로 정점, 꼭짓점(vertex) 등으로 표현하며, 간선(Edge)은 객체간의 관계로 원들을 잇는 선(line)으로 표현합니다.  
![](https://raonzena.github.io/images/graph_1.jpg)
<br/>
# Graph의 종류 #
Graph의 종류를 다음과 같이 간단하게 알아보겠습니다.  
더 많은 종류는 다음 링크를 참조하시면 좋을 것 같습니다.  
<https://gmlwjd9405.github.io/2018/08/13/data-structure-graph.html>
- 무방향 그래프(Undirected Graph)  
  - 무방향 그래프는 간선(Edge)을 통해 어느 방향이든 이동이 가능합니다.
  - 예를 들어 정점(vertex) A와 B를 연결하는 간선은 (A, B) 또는 (B, A)와 같이 정점의 쌍으로 표현합니다. 
- 방향 그래프(Directed Graph)
  - 방향 그래프는 간선에 방향성이 존재합니다.
  - A에서 B로만 갈 수 있는 간선(A->B)은 <A, B>로 표시합니다.
![](https://raonzena.github.io/images/graph_2.jpg)
<br/>
# Graph의 구현 #
- 인접 리스트(Adjacency List)
  - 모든 정점(node)를 인접 리스트에 저장 즉, 각각의 정점에 인접한 정점들을 리스트로 표시한 것입니다.
  - 
- 인접 행렬(Adjacency Matrix)
<br/>
# 인접 행렬 vs 인접 리스트 #

|    |인접 행렬|인접 리스트|
|----|:-----:|:------:|
|접근성|  빠름  |  느림   |
|메모리|많이소모 | 적게소모 |


